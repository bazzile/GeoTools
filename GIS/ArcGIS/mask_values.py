# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# mask_values.py
# Created on: 2017-12-08 18:13:13.00000
#   (generated by ArcGIS/ModelBuilder)
# Description:
# ---------------------------------------------------------------------------

# Import arcpy module
import arcpy
import arcgisscripting
import os
import re
import logging.handlers

# setting up logging
logFormatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger()
logger.setLevel(logging.INFO)
consoleHandler = logging.StreamHandler()
consoleHandler.setFormatter(logFormatter)
logger.addHandler(consoleHandler)


# Local variables:
threshold = -9999


# Set the current workspace
arcpy.env.workspace = r"F:\SE"
arcpy.env.overwriteOutput = True
output_dir = r'U:\PRJ\2017\BANS17\2_WORK\4_OTK\1_Empty'
bad_file_log = r"U:\PRJ\2017\BANS17\2_WORK\4_OTK\!Bad_file_list.txt"

# check out any necessary licenses
arcpy.CheckOutExtension("Spatial")

# Get and print a list of TIFs from the workspace
target_file_list = []
for filename in os.listdir(arcpy.env.workspace):
    if re.search(r'^S\d*E\d*.*\.tif$', filename, re.IGNORECASE) is not None:
        target_file_list.append(filename)

total_files = len(target_file_list)
for i, raster in enumerate(target_file_list):
    # getting name without extension
    raster_name = os.path.splitext(raster)[0]
    logger.info('{} / {} Working with {}'.format(i + 1, total_files, raster))
    if os.path.exists(os.path.join(output_dir, raster_name + '.shp')):
        logger.info('Mask already exists, skipping...')
        continue
    else:
        inRaster = arcpy.Raster(raster)
        # Execute SetNull
        logger.info('Setting Nulls...')
        outSetNull = arcpy.sa.SetNull(inRaster, in_false_raster_or_constant=1, where_clause='Value <> %s' % threshold)
        # check if the result is not empty
        if int(arcpy.GetRasterProperties_management(outSetNull, "ALLNODATA").getOutput(0)) == 1:
            logger.info('Raster {} does not contain required values, skipping...'.format(raster))
        else:
            mask_pol_v_lyr = os.path.sep.join(("in_memory", 'mask'))
            # converting raster to vector mask using temporary 'in_memory' workspace
            logger.info('Computing mask...')
            arcpy.RasterToPolygon_conversion(outSetNull, mask_pol_v_lyr, simplify=True)
            # buffering vector mask
            mask_buff_v_lyr = os.path.sep.join(("in_memory", 'mask_buffered'))
            try:
                logger.info('Buffering...')
                arcpy.Buffer_analysis(
                    mask_pol_v_lyr, mask_buff_v_lyr, '30 Meters', dissolve_option='ALL')
                # adding field with src raster ID
                arcpy.AddField_management(mask_buff_v_lyr, 'INDEX', "TEXT", field_length=16)
                # setting ID
                cur = arcpy.UpdateCursor(mask_buff_v_lyr)
                for row in cur:
                    row.setValue('INDEX', raster_name)
                    cur.updateRow(row)
                arcpy.CopyFeatures_management(mask_buff_v_lyr, os.path.join(output_dir, raster_name + '.shp'))
                # cleaning memory
                logger.info('Mask exported!')
            except arcgisscripting.ExecuteError:
                logger.error('ERROR 999999: Error executing function, writing to log and skipping...')
                with open(bad_file_log, 'a') as f:
                    f.write(raster_name + '\n')
            finally:
                arcpy.Delete_management("in_memory")
